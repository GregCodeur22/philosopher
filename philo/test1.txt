#include "../includes/philo.h"

void	think(t_philo *philo)
{
	if (dead_loop(philo))
		return;
	ft_usleep(1);
	print_message("is thinking", philo, philo->id);
}

void	dream(t_philo *philo)
{
	if (dead_loop(philo))
		return;
	print_message("is sleeping", philo, philo->id); 
	ft_usleep(philo->time_to_sleep);
}

int alive_check(t_philo *philo)
{
    int status;
    pthread_mutex_lock(philo->dead_lock);
    status = !(*philo->dead);
    pthread_mutex_unlock(philo->dead_lock);
    return status;
}


void take_forks(t_philo *philo)
{
	if (philo->num_of_philos == 1)
		{
				pthread_mutex_lock(philo->l_fork);
				print_message("has taken a fork", philo, philo->id);
				ft_usleep(philo->time_to_die + 1);
				pthread_mutex_unlock(philo->l_fork);
				return;
		}
    if (philo->id == philo->num_of_philos)
    {
        pthread_mutex_lock(philo->l_fork);   // Prend d'abord la gauche
        print_message("has taken a fork", philo, philo->id);
        pthread_mutex_lock(philo->r_fork);  // Puis la droite
        print_message("has taken a fork",philo , philo->id);
    }
    // Tous les autres philosophes
    else
    {
        pthread_mutex_lock(philo->r_fork);  // Prend d'abord la droite
        print_message("has taken a fork", philo ,philo->id);
        pthread_mutex_lock(philo->l_fork);   // Puis la gauche
        print_message("has taken a fork", philo, philo->id);
    }
}

void release_forks(t_philo *philo)
{
    if (philo->num_of_philos == 1)
        return;
    pthread_mutex_unlock(philo->l_fork);
    pthread_mutex_unlock(philo->r_fork);
}

void eat(t_philo *philo)
{
    if (!alive_check(philo))
        return;
    take_forks(philo);
    if (!alive_check(philo))
    {
        release_forks(philo);
        return;
    }
    pthread_mutex_lock(philo->meal_lock);
    philo->last_meal = get_current_time();
		philo->meals_eaten++;
    pthread_mutex_unlock(philo->meal_lock);
    print_message("is eating", philo, philo->id);
    ft_usleep(philo->time_to_eat);
    release_forks(philo);
}



#include "../includes/philo.h"

void	print_message(char *str, t_philo *philo, int id)
{
	size_t	time;

	pthread_mutex_lock(philo->write_lock);
	time = get_current_time() - philo->start_time;
	if (!dead_loop(philo))
		printf("%zu %d %s\n", time, id, str);
	pthread_mutex_unlock(philo->write_lock);
}

int	philosopher_dead(t_philo *philo, size_t time_to_die)
{
	pthread_mutex_lock(philo->meal_lock);
	if (get_current_time() - philo->last_meal >= (long long)time_to_die
		&& philo->eating == 0)
		return (pthread_mutex_unlock(philo->meal_lock), 1);
	pthread_mutex_unlock(philo->meal_lock);
	return (0);
}

int	check_if_dead(t_philo *philos)
{
	int	i;

	i = 0;
	while (i < philos[0].num_of_philos)
	{
		if (philosopher_dead(&philos[i], philos[i].time_to_die))
		{
			print_message("died", &philos[i], philos[i].id);
			pthread_mutex_lock(philos[0].dead_lock);
			*philos->dead = 1;
			pthread_mutex_unlock(philos[0].dead_lock);
			return (1);
		}
		i++;
	}
	return (0);
}

int	check_if_all_ate(t_philo *philos)
{
	int	i;
	int	finished_eating;

	i = 0;
	finished_eating = 0;
	if (philos[0].num_times_to_eat == -1)
		return (0);
	while (i < philos[0].num_of_philos)
	{
		pthread_mutex_lock(philos[i].meal_lock);
		if (philos[i].meals_eaten >= philos[i].num_times_to_eat)
			finished_eating++;
		pthread_mutex_unlock(philos[i].meal_lock);
		i++;
	}
	if (finished_eating == philos[0].num_of_philos)
	{
		return (1);
	}
	return (0);
}

void	*ft_monitor(void *pointer)
{
	t_philo	*philos;

	philos = (t_philo *)pointer;
	while (1)
	{
		if (check_if_dead(philos))
			break;
		if (check_if_all_ate(philos))
			break;
	}
	return (pointer);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 18:14:37 by garside           #+#    #+#             */
/*   Updated: 2025/06/24 11:41:48 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

void	init_data(t_data *data, int philo_count)
{
	data->dead = 0;
	data->fork = malloc(sizeof(pthread_mutex_t) * philo_count);
	if (!data->fork)
	{
		printf("Malloc fail\n");
		return ;
	}
	pthread_mutex_init(&data->display_lock, NULL);
	pthread_mutex_init(&data->dead_lock, NULL);
	pthread_mutex_init(&data->meal_lock, NULL);
}

void	init_forks(pthread_mutex_t *forks, int philo_num)
{
	int	i;

	i = 0;
	while (i < philo_num)
	{
		pthread_mutex_init(&forks[i], NULL);
		i++;
	}
}

void	init_routine(t_philo *philo, char **av)
{
	philo->num_of_philos = ft_atoi(av[1]);
	philo->time_to_die = ft_atoi(av[2]);
	philo->time_to_eat = ft_atoi(av[3]);
	philo->time_to_sleep = ft_atoi(av[4]);
	if (av[5])
		philo->num_times_to_eat = ft_atoi(av[5]);
	else
		philo->num_times_to_eat = -1;
}

void	init_philo(t_data *data, t_philo *philos, char **av,
		long long start_time)
{
	int i = 0;

	while (i < ft_atoi(av[1]))
	{
		philos[i].id = i + 1;
		philos[i].eating = 0;
		philos[i].meals_eaten = 0;
		init_routine(&philos[i], av);
		philos[i].start_time = start_time;
		philos[i].write_lock = &data->display_lock;
		philos[i].dead_lock = &data->dead_lock;
		philos[i].meal_lock = &data->meal_lock;
		philos[i].dead = &data->dead;
		philos[i].l_fork = &data->fork[i];
		if (i == 0)
			philos[i].r_fork = &data->fork[philos[i].num_of_philos - 1];
		else
			philos[i].r_fork = &data->fork[i - 1];
		pthread_mutex_lock(philos[i].meal_lock);
		philos[i].last_meal = start_time;
		pthread_mutex_unlock(philos[i].meal_lock);
		i++;
	}
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 18:14:25 by garside           #+#    #+#             */
/*   Updated: 2025/06/23 18:23:27 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

int	ft_usleep(size_t milliseconds)
{
	size_t	start;

	start = get_current_time();
	while ((get_current_time() - start) < milliseconds)
		usleep(500);
	return (0);
}

int	ft_atoi(const char *str)
{
	int	sign;
	int	res;

	sign = 1;
	res = 0;
	while (*str == ' ' || (*str >= 9 && *str <= 13))
		str++;
	if (*str == '-')
	{
		sign = -1;
		str++;
	}
	if (*str == '+')
		str++;
	while (*str >= '0' && *str <= '9')
	{
		res = res * 10 + (*str - '0');
		str++;
	}
	return (res * sign);
}

long long	get_current_time(void)
{
	struct timeval	time;
	long long		time_ms;

	if (gettimeofday(&time, NULL) == -1)
		return (0);
	time_ms = ((long long)time.tv_sec * 1000) + (time.tv_usec / 1000);
	return (time_ms);
}

int	check_arg_content(char *arg)
{
	int	i;

	i = 0;
	while (arg[i] != '\0')
	{
		if (arg[i] < '0' || arg[i] > '9')
			return (1);
		i++;
	}
	return (0);
}

int	valid_param(char **av)
{
	if (ft_atoi(av[1]) > 200 || ft_atoi(av[1]) <= 0
		|| check_arg_content(av[1]) == 1)
		return (write(2, "Invalid philosophers number\n", 29), 1);
	if (ft_atoi(av[2]) <= 0 || check_arg_content(av[2]) == 1)
		return (write(2, "Invalid time to die\n", 21), 1);
	if (ft_atoi(av[3]) <= 0 || check_arg_content(av[3]) == 1)
		return (write(2, "Invalid time to eat\n", 21), 1);
	if (ft_atoi(av[4]) <= 0 || check_arg_content(av[4]) == 1)
		return (write(2, "Invalid time to sleep\n", 23), 1);
	if (av[5] && (ft_atoi(av[5]) < 0 || check_arg_content(av[5]) == 1))
		return (write(2, "Invalid number of times each philosopher must eat\n",
				51), 1);
	return (0);
}

int	main(int ac, char **av)
{
	t_data		*data;
	t_philo		*philo;
	int			philo_count;
	long long	start_time;

	start_time = get_current_time();
	if (ac != 5 && ac != 6)
		return (printf("Error: bad number of arguments\n"), 1);
	if (valid_param(av) == 1)
		return (1);
	philo_count = ft_atoi(av[1]);
	data = malloc(sizeof(t_data));
	if (!data)
		return (printf("Malloc fail for data\n"), 1);
	philo = malloc(sizeof(t_philo) * philo_count);
	if (!philo)
		return (printf("Malloc fail for philo\n"), 1);
	data->philos = philo;
	init_data(data, philo_count);
	init_forks(data->fork, philo_count);
	init_philo(data, philo, av, start_time);
	thread_create(data);
	free(data->fork);
	free(philo);
	free(data);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_routine.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 18:15:59 by garside           #+#    #+#             */
/*   Updated: 2025/06/24 11:42:00 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/philo.h"

int	dead_loop(t_philo *philo)
{
	pthread_mutex_lock(philo->dead_lock);
	if (*philo->dead == 1)
		return (pthread_mutex_unlock(philo->dead_lock), 1);
	pthread_mutex_unlock(philo->dead_lock);
	return (0);
}

void	*philo_routine(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	if (philo->id % 2 != 0)
		ft_usleep(1);
	while (1)
	{
		if (*philo->dead)
			break ;
		if (philo->num_times_to_eat != -1)
		{
			pthread_mutex_lock(philo->meal_lock);
			if (philo->meals_eaten >= philo->num_times_to_eat)
			{
				pthread_mutex_unlock(philo->meal_lock);
				break ;
			}
			pthread_mutex_unlock(philo->meal_lock);
		}
		eat(philo);
		dream(philo);
		think(philo);
	}
	return (NULL);
}

void	destroy_all(t_data *data)
{
	int	i;

	i = 0;
	pthread_mutex_destroy(&data->display_lock);
	pthread_mutex_destroy(&data->meal_lock);
	pthread_mutex_destroy(&data->dead_lock);
	while (i < data->philos[0].num_of_philos)
	{
		pthread_mutex_destroy(&data->fork[i]);
		i++;
	}
}

int	thread_create(t_data *data)
{
	pthread_t	monitor;
	int			i;

	i = 0;
	while (i < data->philos[0].num_of_philos)
	{
		if (pthread_create(&data->philos[i].thread, NULL, &philo_routine,
				&data->philos[i]) != 0)
		{
			printf("thread creation error\n");
			destroy_all(data);
		}
		i++;
	}
	if (pthread_create(&monitor, NULL, &ft_monitor, data->philos) != 0)
	{
		printf("Error : thread creation\n");
		destroy_all(data);
	}
	if (pthread_join(monitor, NULL) != 0)
	{
		printf("Error thread join\n");
		destroy_all(data);
	}
	i = 0;
	while (i < data->philos[0].num_of_philos)
	{
		if (pthread_join(data->philos[i].thread, NULL) != 0)
		{
			printf("Error : join error");
			destroy_all(data);
		}
		i++;
	}
	return (0);
}
